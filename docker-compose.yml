version: "3.8"

services:
  mongodb:
    image: mongo
    container_name: mongodb
    command: ["/bin/sh", "-c", "mongod --replSet rs0 --bind_ip_all --port 27017"]
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/config
      - ./backend/restore.sh:/docker-entrypoint-initdb.d/restore.sh
      - ./backend/inventory:/dump
    env_file:
      - ./backend/.env
    restart: always
    ports:
      - 27017:27017
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  api:
    image: inventory-api
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: api
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/public
      - /usr/src/app/node_modules
      - ./frontend/package.json:/usr/src/app/frontend/package.json
      - ./frontend/dist:/usr/src/app/frontend/dist
    ports:
      - 8080:8080
    env_file:
      - ./backend/.env
    environment:
      HOST: ${HOST:-0.0.0.0}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app-network

  app:
    image: inventory-app
    build:
      context: ./frontend 
      dockerfile: Dockerfile
    container_name: app
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - 3000:3000
    env_file:
      - ./frontend/.env
    networks:
      - app-network

volumes:
  mongo_data:
  mongo_config:
networks:
  app-network:
    driver: bridge
